FCC JS Date Object - Building Date Formatter

content:
- Constructor
  > In JavaScript, there are many built-in constructors that create objects. A constructor is like a regular function, but starts with a capital letter, and is initialized with the new operator.

- Date Object
  > Build in object from JS to help manipulate with Date related stuff

- date.getDate();
  > One of those is the .getDate() method, which returns a number between 1 and 31 that represents the day of the month for that date.
  > ex: 
  const date = new Date();
  const dayOfTheMonth = date.getDate();
  console.log(dayOfTheMonth);

- date.getMonth();
  > The .getMonth() method returns a number between 0 and 11. This represents the month for the date provided, where 0 is January and 11 is December. Because the number this method returns is zero-based, you need to add 1 to it to get the expected month number.

- date.getYear()
  > The .getFullYear() method returns a number which represents the year for the provided date.

- date.getHours();
  > The .getHours() method returns a number between 0 and 23. This represents the hour for the provided date, where 0 is midnight and 23 is 11 p.m.

- date.getMinutes();
  > The .getMinutes() method returns a number between 0 and 59 which represents the minutes for the provided date.

- JavaScript change
  > In JavaScript, the change event is used to detect when the value of an HTML element has changed
  > The change event is fired for <input>, <select>, and <textarea> elements when the user modifies the element's value. Unlike the input event, the change event is not necessarily fired for each alteration to an element's value.
  > Can be used for select option input
  > ex: 
  element.addEventListener("change", () => {});

- switch
  > A switch statement is used to compare an expression against multiple possible values and execute different code blocks based on the match. It's commonly used for branching logic.
  > ex:
  switch (dayOfWeek) {
    case 1:
      console.log("It's Monday!");
      break;
    case 2:
      console.log("It's Tuesday!");
      break;
    // ...cases for other workdays
    default:
      console.log("It's the weekend!");
  }

- split('separator') method
  > The split() method is used to divide a string into substrings based on a specified separator. It then returns these substrings as elements of an array.
  > ex:
  const greeting = "Hello World";
  greeting.split(); // ["Hello World"]
  greeting.split(' '); // [ 'Hello', 'World' ]

- array.reverse();
  > To reverse an array of elements, you can use the reverse method. This method reverses the order of the elements in the array in place. The first element becomes the last, and the last element becomes the first.
  > ex:
  // returns [5, 4, 3, 2, 1]
  [1, 2, 3, 4, 5].reverse(); 

- array.join('seaparator')
  > In the previous project, you learned how to work with the join method. This method takes an array of elements and joins them into a string. Similar to the split method, the join method also takes an optional separator. If you don't provide a separator, the default separator is a comma.
  > ex:
  // returns "1-2-3-4-5"
  [1, 2, 3, 4, 5].join("-");

- 





